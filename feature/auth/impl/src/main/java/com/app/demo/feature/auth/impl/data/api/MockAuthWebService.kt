package com.app.demo.feature.auth.impl.data.api

import com.app.demo.feature.auth.impl.data.dto.UserDto
import com.app.demo.feature.auth.shared.domain.model.error.InvalidCredentialsException
import com.app.demo.feature.auth.shared.domain.model.error.UserAlreadyExistsException
import com.app.demo.storage.shared.dao.UserDao
import javax.inject.Inject
import kotlin.random.Random

/**
 * Just a mock implementation for [AuthWebService].
 * Usually generated by Retrofit f.e.
 */
class MockAuthWebService @Inject constructor(
    private val userDao: com.app.demo.storage.shared.dao.UserDao
) : AuthWebService {
    override suspend fun login(email: String, password: String): Result<UserDto> {
        return getRandomLoginApiResult(email)
    }

    override suspend fun register(email: String, password: String): Result<UserDto> {
        // In our imaginary scenario we will check if user exists withing app's database
        return getRegisterApiResult(email)
    }

    private fun getRandomLoginApiResult(email: String): Result<UserDto> {
        return when (Random.nextInt(0, 2)) {
            0 -> {
                Result.success(
                    UserDto(
                        id = email.hashCode(),
                        email = email,
                        username = generateRandomUsername()
                    )
                )
            }

            else -> {
                Result.failure(InvalidCredentialsException())
            }
        }
    }

    private suspend fun getRegisterApiResult(email: String): Result<UserDto> {
        val existingUser = userDao.getUserByEmail(email)
        return if (existingUser != null) {
            Result.failure(UserAlreadyExistsException())
        } else {
            Result.success(
                UserDto(
                    id = email.hashCode(),
                    email = email,
                    username = generateRandomUsername()
                )
            )
        }
    }

    private fun generateRandomUsername(): String {
        val allowedChars = ('a'..'z') + ('0'..'9')
        val usernameLength = Random.nextInt(5, 11)
        return (1..usernameLength)
            .map { allowedChars.random() }
            .joinToString("")
    }
}